defaultStorageMapping: SOURCE
installedPackages: {}
jobs: {}
locations:
  SNOWPIPE:
    mappingDefinitions:
      "169":
        database: ANANDHIS_DEV
        schema: TARGET
  SOURCE:
    mappingDefinitions:
      "169":
        database: DE_UDN_DB
        schema: RM_DEV
  STAGE:
    mappingDefinitions:
      "169":
        database: ANANDHIS_DEV
        schema: TARGET
  TARGET:
    mappingDefinitions:
      "169":
        database: ANANDHIS_DEV
        schema: TARGET
macros: {}
packages: {}
projects: {}
stepTypes:
  StepType-297:
    id: "297"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |+
        capitalized: COPY INTO - SNOWPIPE
        short: 'COPY'
        tagColor: '#6ca37b'
        isDisabled: false
        plural: Copy Into
        config:

        - groupName: Snowpipe Options
          items:
          - displayName: Enable Snowpipe
            attributeName: flagSnowpipe
            type: toggleButton
            isRequired: true
            default: false

          - displayName: Cloud Provider
            attributeName: cloudProvider
            type: dropdownSelector
            default: "AWS"
            options:
            - "AWS"
            - "Azure"
            - "GCP"
            enableIf: "{% if config.flagSnowpipe == true %} true {% else %} false {% endif %}"

          - displayName: AWS SNS Topic
            attributeName: awsSnsTopic
            type: textBox
            isRequired: false
            enableIf: "{% if config.flagSnowpipe == true and config.cloudProvider == 'AWS' %} true {% else %} false {% endif %}"

          - displayName: Integration
            attributeName: integration
            type: textBox
            isRequired: false
            enableIf: "{% if config.flagSnowpipe == true and config.cloudProvider != 'AWS' %} true {% else %} false {% endif %}"

        - groupName: File Location
          items:
          - displayName: Stage Storage Location
            attributeName: stageStorageLocationName
            type: textBox
            default: 'Enter Storage Location name'
            isRequired: true

          - displayName: Stage Name
            attributeName: stageName
            type: textBox
            default: 'stage_name/foldername/'
            isRequired: true

          - displayName: File Name(s) (Optional - Ex:'a.csv','b.csv' )
            attributeName: fileNames
            type: textBox
            isRequired: false
            enableIf: "{% if config.flagSnowpipe != true %} true {% else %} false {% endif %}"

          - displayName: File Pattern (Optional - Ex:'.*hea.*[.]csv')
            attributeName: filePattern
            type: textBox
            isRequired: false
          

        - groupName: File Format
          items:
          - displayName: File Format Definition
            attributeName: fileFormatType
            type: dropdownSelector
            default: "File Format Name"
            options:
            - File Format Name
            - File Format Values

          - displayName: File Format Name
            attributeName: fileFormatName
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.fileFormatType == 'File Format Name' %} true {% else %} false {% endif %}"

          - displayName: File Type
            attributeName: fileType
            type: dropdownSelector
            default: CSV
            options:
            - "CSV"
            - "PARQUET"
            - "JSON"
            - "AVRO"
            - "ORC"
            - "XML"
            isRequired: false
            

          - displayName: Compression
            attributeName: compression
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV','JSON')) %} true {% else %} false {% endif %}"
            type: dropdownSelector
            default: "AUTO"
            options:
            - "AUTO"
            - "GZIP"
            - "BZ2"
            - "BROTLI"
            - "ZSTD"
            - "DEFLATE"
            - "RAW_DEFLATE"
            - "NONE"
            isRequired: false

          - displayName: Record delimiter
            attributeName: recDelim
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: "\n"
            isRequired: false

          - displayName: Field delimiter
            attributeName: fieldDelim
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: ","
            isRequired: false

          - displayName: Field optionally enclosed by
            attributeName: fieldEnclosed
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: "\\042"
            isRequired: false

          - displayName: Number of header lines to skip
            attributeName: skipHeader
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: "1"
            isRequired: false

          - displayName: Skip blank lines
            attributeName: skipBlankLines
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            type: toggleButton
            default: true
            isRequired: false

          - displayName: Trim space
            attributeName: trimSpace
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType not in ('XML')) %} true {% else %} false {% endif %}"
            type: toggleButton
            default: true
            isRequired: false

          - displayName: Replace invalid characters
            attributeName: replaceinvalidcharacters
            enableIf: "{% if (config.fileFormatType != 'File Format Name') %} true {% else %} false {% endif %}"
            type: toggleButton
            default: false
            isRequired: false    

          - displayName: Strip Outer Array
            attributeName: stripouterarray
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('JSON')) %} true {% else %} false {% endif %}"
            type: toggleButton
            default: false
            isRequired: false   
          
          - displayName: Date format
            attributeName: dateformat
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('JSON','CSV')) %} true {% else %} false {% endif %}"
            isRequired: false

          - displayName: Time format
            attributeName: timeformat
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('JSON','CSV')) %} true {% else %} false {% endif %}"
            isRequired: false

          - displayName: Timestamp format
            attributeName: timestampformat
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('JSON','CSV')) %} true {% else %} false {% endif %}"
            isRequired: false

        - groupName: Copy Options
          items:

          - displayName: On Error Behavior
            attributeName: onError
            type: dropdownSelector
            options:
            - "CONTINUE"
            - "SKIP_FILE"
            - "SKIP_FILE_<num>"
            - "SKIP_FILE_<num>%"
            isRequired: false
            enableIf: "{% if config.flagSnowpipe == true %} true {% else %} false {% endif %}"
            

          - displayName: On Error Behavior
            attributeName: onError1
            type: dropdownSelector
            options:
            - "CONTINUE"
            - "SKIP_FILE"
            - "SKIP_FILE_<num>"
            - "SKIP_FILE_<num>%"
            - "ABORT_STATEMENT"
            isRequired: false
            enableIf: "{% if config.flagSnowpipe != true %} true {% else %} false {% endif %}"

          - displayName: Specify the number of errors that can be skipped
            attributeName: errornumber
            type: textBox
            enableIf: "{% if config.onError in('SKIP_FILE_<num>','SKIP_FILE_<num>%') or config.onError1 in('SKIP_FILE_<num>','SKIP_FILE_<num>%') %} true {% else %} false {% endif %}"
            isRequired: false

          - displayName: Size Limit
            attributeName: sizeLimit
            type: textBox
            isRequired: false
            enableIf: "{% if config.flagSnowpipe != true %} true {% else %} false {% endif %}"

          - displayName: Purge Behavior
            attributeName: purgeBehavior
            type: dropdownSelector
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false
            enableIf: "{% if config.flagSnowpipe != true %} true {% else %} false {% endif %}"

          - displayName: Return Failed Only
            attributeName: returnFailedOnly
            type: dropdownSelector
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false
            enableIf: "{% if config.flagSnowpipe != true %} true {% else %} false {% endif %}"

          - displayName: Force
            attributeName: forceLoad
            type: dropdownSelector
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false
            enableIf: "{% if config.flagSnowpipe != true %} true {% else %} false {% endif %}"

          - displayName: Load Uncertain Files
            attributeName: loadUncertainFiles
            type: dropdownSelector
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false
            enableIf: "{% if config.flagSnowpipe != true %} true {% else %} false {% endif %}"

          - displayName: Enforce Length
            attributeName: enforceLength
            type: dropdownSelector
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false

          - displayName: Truncate Columns
            attributeName: truncateColumns
            type: dropdownSelector
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false


        systemColumns:

        - displayName: SRC
          transform: '$1'
          dataType: VARIANT
          placement: end
          attributeName: sysJSON

        - displayName: LOAD_TIMESTAMP
          transform: 'current_timestamp()::timestamp_ntz'
          dataType: TIMESTAMP_NTZ
          placement: end
          attributeName: sysLdTs

        - displayName: FILENAME
          transform: 'METADATA$FILENAME'
          dataType: STRING
          placement: end
          attributeName: sysFlNm

        - displayName: FILE_ROW_NUMBER
          transform: 'METADATA$FILE_ROW_NUMBER'
          dataType: NUMBER
          placement: end
          attributeName: sysFlRwNm

        - displayName: FILE_LAST_MODIFIED
          transform: 'METADATA$FILE_LAST_MODIFIED'
          dataType: TIMESTAMP_NTZ
          placement: end
          attributeName: sysFlLtMd

        - displayName: SCAN_TIME
          transform: 'METADATA$START_SCAN_TIME'
          dataType: TIMESTAMP_NTZ
          placement: end
          attributeName: sysFlScTm


      templates:
        create:
          templateString: |-
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : CopyInto-SnowPipe == #}
            {# == Node Type Description    : This node creates target table to load data from internal or external stages using Copy-Into.Also creates a pipe to  loads data from files as soon as they are available in a stage external == #}

            {% set srcSchName = node.location.name %}
            {% set db = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
            {% set sch = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}
            {% set tbl = node.name %}
            {% set fqTblName = '"' + db + '"."' + sch + '"."' + tbl + '"' %}
            {% set fqPipeName = '"' + db + '"."' + sch + '"."' + tbl + '_PIPE"' %}

            #External Stage locations

            {% set stageStorageLocationName = config.stageStorageLocationName %}
            {% set dbStage = storageLocations | selectattr('name', 'equalto', stageStorageLocationName) | map(attribute='database') | first %}
            {% set schStage = storageLocations | selectattr('name', 'equalto', stageStorageLocationName) | map(attribute='schema') | first %}
            {% set ns = namespace(counter=1) %}

            {%- if config.filePattern | length > 0 -%} 
                {%- set filePatternSQL = 'PATTERN = ' + config.filePattern -%} 
            {%- else -%}
                {%- set filePatternSQL = "" -%} 
            {%- endif -%}

            {%- if config.fileNames | length > 0 %} 
                {% set fileNameSQL = 'FILES = (' + config.fileNames + ')' %} 
            {%- else -%}
                {% set fileNameSQL = "" %} 
            {% endif %}

            {{ stage('Create Table') }}
            CREATE OR REPLACE TABLE {{ fqTblName }} (
                {% for col in columns %}
                    "{{ col.name }}" {{ col.dataType }}
                {%- if col.Description | length > 0 %} COMMENT '{{ col.Description }}'{% endif %}
                {%- if not loop.last -%}, {% endif %}
            {% endfor %}
            )

            {%- if (config.flagSnowpipe != true) and parameters.loadType != 'Reload' -%}

                {{ stage('Historical Full Load-Using Copy-into') }}
                
                         COPY INTO "{{ db }}"."{{ sch }}"."{{ node.name }}" (
                        {%- for col in columns %}
                            "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    )
                    FROM (SELECT
                        {%- for col in sources[0].columns %}
            	           {% if not( col.sysLdTs or col.sysFlNm or col.sysFlRwNm or col.sysFlLtMd or col.sysFlScTm or col.sysJSON )%}
                                  {%if (config.fileType == 'JSON') or (config.fileType == 'PARQUET') or (config.fileType == 'ORC') or (config.fileType == 'AVRO')%}
                                     ${{ ns.counter}}:{{col.name}}::{{ col.dataType}}  
                                  {%else%}
                                    ${{ ns.counter}}::{{ col.dataType}}    
                                    {% set ns.counter = ns.counter + 1 %}       
                                  {%endif%}       
            	           {% else %}
            	                  {{ col.transform }}
            	           {%endif%}
                        {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}

                       FROM '@{{ dbStage }}.{{ schStage }}.{{ config.stageName }}') 
                    {{fileNameSQL}}
                    {{ filePatternSQL }}

                     {%- if config.fileFormatType == 'File Format Name' %}
                      FILE_FORMAT = (FORMAT_NAME = '{{ dbStage }}.{{ schStage }}.{{ config.fileFormatName}}')
                     {%else%}
                        FILE_FORMAT = ( TYPE = {{ config.fileType}}
                         {% if config.compression != "NONE" %}
                          COMPRESSION = {{ config.compression }}
                         {%endif%}
            			 
                         {% if config.recDelim and config.fileType in ('CSV')%}
                          RECORD_DELIMITER = '{{ config.recDelim}}'
                         {%endif%}
            			 
                        {% if config.fieldDelim and config.fileType in ('CSV')%}
                          FIELD_DELIMITER = '{{ config.fieldDelim}}'
                        {%endif%}
                      {% if config.fieldEnclosed and config.fileType in ('CSV')%}
                           FIELD_OPTIONALLY_ENCLOSED_BY ='{{ config.fieldEnclosed }}'
                      {%endif%}
                      {% if config.skipBlankLines and config.fileType in ('CSV')%}
                         SKIP_BLANK_LINES =  {{ config.skipBlankLines }}
                      {%endif%}
                      {% if config.skipHeader and config.fileType in ('CSV')%}
                         SKIP_HEADER = {{config.skipHeader}}
                      {%endif%}
                      {% if config.trimSpace%}
                          TRIM_SPACE = {{ config.trimSpace }}
                      {%endif%}
                      {% if config.replaceinvalidcharacters%}
                          REPLACE_INVALID_CHARACTERS = {{config.replaceinvalidcharacters}}
                      {%endif%}
                      {% if config.stripouterarray and config.fileType in ('JSON')%}
                          STRIP_OUTER_ARRAY = {{config.stripouterarray}}
                      {%endif%}

                       {% if config.dateformat != "AUTO" and config.dateformat != ""   and config.fileType in ('JSON','CSV')%}
                          DATE_FORMAT = '{{config.dateformat}}'
            	       {% elif config.dateformat == "AUTO" %}
            	         DATE_FORMAT = AUTO
                       {%endif%}
                         {% if config.timeformat != "AUTO" and config.timeformat != ""   and config.fileType in ('JSON','CSV')%}
                          TIME_FORMAT = '{{config.timeformat}}'
            	       {% elif config.timeformat == "AUTO" %}
            	         TIME_FORMAT = AUTO
                       {%endif%}
                       {% if config.timestampformat != "AUTO" and config.timestampformat != ""   and config.fileType in ('JSON','CSV')%}
                          TIMESTAMP_FORMAT = '{{config.timestampformat}}'
            	       {% elif config.timestampformat == "AUTO" %}
            	         TIMESTAMP_FORMAT = AUTO
                       {%endif%}

                      )
                    {%endif%}

                    {% if config.onError1 != "" %}
                        {% if config.onError1 in ('SKIP_FILE_<num>') %}
                          {% set onErrorReplaced = config.onError1 | replace('<num>', config.errornumber|string) %}
                           ON_ERROR = {{ onErrorReplaced }}
                        {%elif config.onError1 in ('SKIP_FILE_<num>%') %}
                          {% set onErrorReplaced = config.onError1 | replace('<num>', config.errornumber|string) %}
                           ON_ERROR = '{{ onErrorReplaced }}'
                        {%else%}
                           ON_ERROR = {{ config.onError1 }}
                        {%endif%}
                    {%endif%}

                    {% if config.sizeLimit != "" %}
                         SIZE_LIMIT = {{ config.sizeLimit }}
                    {%endif%}
                    {% if config.returnFailedOnly != "" %}
                         RETURN_FAILED_ONLY = {{ config.returnFailedOnly }}
                    {%endif%}
                    {% if config.loadUncertainFiles != "" %}
                          LOAD_UNCERTAIN_FILES = {{ config.loadUncertainFiles }}
                    {%endif%}
                    {% if config.purgeBehavior != "" %}
                          PURGE =  {{ config.purgeBehavior }}
                    {%endif%}
                    {% if config.enforceLength != "" %}
                          ENFORCE_LENGTH = {{ config.enforceLength }}
                    {%endif%}
                    {% if config.truncateColumns != ""%}
                          TRUNCATECOLUMNS = {{ config.truncateColumns }}
                    {%endif%}

            {%- elif config.flagSnowpipe == true -%}
             
              {{ stage('Create Pipe') }}
                    CREATE OR REPLACE PIPE {{ fqPipeName }} AUTO_INGEST = TRUE 
                    {% if config.awsSnsTopic != "" %}
                          AWS_SNS_TOPIC = '{{ config.awsSnsTopic }}'
                    {%endif%}
                    {% if config.integration != "" %}
                          INTEGRATION = '{{ config.integration }}'
                    {%endif%}
                    AS
                    COPY INTO "{{ db }}"."{{ sch }}"."{{ node.name }}" (
                        {%- for col in columns %}
                            "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    )
                    FROM (SELECT

                        {%- for col in sources[0].columns %}
            	           {% if not( col.sysLdTs or col.sysFlNm or col.sysFlRwNm or col.sysFlLtMd or col.sysFlScTm or col.sysJSON )%}
                                  {%if (config.fileType == 'JSON') or (config.fileType == 'PARQUET') or (config.fileType == 'ORC') or (config.fileType == 'AVRO')%}
                                     ${{ ns.counter}}:{{col.name}}::{{ col.dataType}}  
                                  {%else%}
                                    ${{ ns.counter}}::{{ col.dataType}}    
                                    {% set ns.counter = ns.counter + 1 %}       
                                  {%endif%}       
            	           {% else %}
            	                  {{ col.transform }}
            	           {%endif%}
                        {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                      
                        FROM '@{{ dbStage }}.{{ schStage }}.{{ config.stageName }}') 
                        {{ filePatternSQL }}
                  
                      {%- if config.fileFormatType == 'File Format Name' %}
                      FILE_FORMAT = (FORMAT_NAME = '{{ dbStage }}.{{ schStage }}.{{ config.fileFormatName}}')
                     {%else%}
                        FILE_FORMAT = ( TYPE = {{ config.fileType}}
                         {% if config.compression != "NONE" %}
                          COMPRESSION = {{ config.compression }}
                         {%endif%}
            			 
                         {% if config.recDelim and config.fileType in ('CSV')%}
                          RECORD_DELIMITER = '{{ config.recDelim}}'
                         {%endif%}
            			 
                        {% if config.fieldDelim and config.fileType in ('CSV')%}
                          FIELD_DELIMITER = '{{ config.fieldDelim}}'
                        {%endif%}
                      {% if config.fieldEnclosed and config.fileType in ('CSV')%}
                           FIELD_OPTIONALLY_ENCLOSED_BY ='{{ config.fieldEnclosed }}'
                      {%endif%}
                      {% if config.skipBlankLines and config.fileType in ('CSV')%}
                         SKIP_BLANK_LINES =  {{ config.skipBlankLines }}
                      {%endif%}
                      {% if config.skipHeader and config.fileType in ('CSV')%}
                         SKIP_HEADER = {{config.skipHeader}}
                      {%endif%}
                      {% if config.trimSpace%}
                          TRIM_SPACE = {{ config.trimSpace }}
                      {%endif%}
                      {% if config.replaceinvalidcharacters%}
                          REPLACE_INVALID_CHARACTERS = {{config.replaceinvalidcharacters}}
                      {%endif%}
                      {% if config.stripouterarray and config.fileType in ('JSON')%}
                          STRIP_OUTER_ARRAY = {{config.stripouterarray}}
                      {%endif%}
                                 {% if config.dateformat != "AUTO" and config.dateformat != ""   and config.fileType in ('JSON','CSV')%}
                          DATE_FORMAT = '{{config.dateformat}}'
            	       {% elif config.dateformat == "AUTO" %}
            	         DATE_FORMAT = AUTO
                       {%endif%}
                         {% if config.timeformat != "AUTO" and config.timeformat != ""   and config.fileType in ('JSON','CSV')%}
                          TIME_FORMAT = '{{config.timeformat}}'
            	       {% elif config.timeformat == "AUTO" %}
            	         TIME_FORMAT = AUTO
                       {%endif%}
                       {% if config.timestampformat != "AUTO" and config.timestampformat != ""   and config.fileType in ('JSON','CSV')%}
                          TIMESTAMP_FORMAT = '{{config.timestampformat}}'
            	       {% elif config.timestampformat == "AUTO" %}
            	         TIMESTAMP_FORMAT = AUTO
                       {%endif%} 
                      )
                    {%endif%}

                    {% if config.onError != "" %}
                        {% if config.onError in ('SKIP_FILE_<num>','SKIP_FILE_<num>%') %}
                          {% set onErrorReplaced = config.onError | replace('<num>', config.errornumber|string) %}
                           ON_ERROR = {{ onErrorReplaced }}
                    {%elif config.onError in ('SKIP_FILE_<num>%') %}
                          {% set onErrorReplaced = config.onError | replace('<num>', config.errornumber|string) %}
                           ON_ERROR = '{{ onErrorReplaced }}'
                    {%else%}
                           ON_ERROR = {{ config.onError }}
                        {%endif%}
                    {%endif%}

                    {% if config.enforceLength != ""%}
                          ENFORCE_LENGTH = {{ config.enforceLength }}
                    {%endif%}
                    {% if config.truncateColumns != ""%}
                          TRUNCATECOLUMNS = {{ config.truncateColumns }}
                    {%endif%}
              
            {%- elif config.flagSnowpipe != true and parameters.loadType == 'Reload' -%}

            {{ stage('Truncate Target Table') }}
                TRUNCATE TABLE IF EXISTS "{{ db }}"."{{ sch }}"."{{ node.name }}"

                {{ stage('Reload data-Copy Into Force') }}

                     COPY INTO "{{ db }}"."{{ sch }}"."{{ node.name }}" (
                        {%- for col in columns %}
                            "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    )
                    FROM (SELECT
                        {%- for col in sources[0].columns %}
            	           {% if not( col.sysLdTs or col.sysFlNm or col.sysFlRwNm or col.sysFlLtMd or col.sysFlScTm or col.sysJSON )%}
                                  {%if (config.fileType == 'JSON') or (config.fileType == 'PARQUET') or (config.fileType == 'ORC') or (config.fileType == 'AVRO')%}
                                     ${{ ns.counter}}:{{col.name}}::{{ col.dataType}}  
                                  {%else%}
                                    ${{ ns.counter}}::{{ col.dataType}}    
                                    {% set ns.counter = ns.counter + 1 %}       
                                  {%endif%}       
            	           {% else %}
            	                  {{ col.transform }}
            	           {%endif%}
                        {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}

                       FROM '@{{ dbStage }}.{{ schStage }}.{{ config.stageName }}') 
                    {{fileNameSQL}}
                    {{ filePatternSQL }}
                    
                        {%- if config.fileFormatType == 'File Format Name' %}
                      FILE_FORMAT = (FORMAT_NAME = '{{ dbStage }}.{{ schStage }}.{{ config.fileFormatName}}')
                     {%else%}
                        FILE_FORMAT = ( TYPE = {{ config.fileType}}
                         {% if config.compression != "NONE" %}
                          COMPRESSION = {{ config.compression }}
                         {%endif%}
            			 
                         {% if config.recDelim and config.fileType in ('CSV')%}
                          RECORD_DELIMITER = '{{ config.recDelim}}'
                         {%endif%}
            			 
                        {% if config.fieldDelim and config.fileType in ('CSV')%}
                          FIELD_DELIMITER = '{{ config.fieldDelim}}'
                        {%endif%}
                      {% if config.fieldEnclosed and config.fileType in ('CSV')%}
                           FIELD_OPTIONALLY_ENCLOSED_BY ='{{ config.fieldEnclosed }}'
                      {%endif%}
                      {% if config.skipBlankLines and config.fileType in ('CSV')%}
                         SKIP_BLANK_LINES =  {{ config.skipBlankLines }}
                      {%endif%}
                      {% if config.skipHeader and config.fileType in ('CSV')%}
                         SKIP_HEADER = {{config.skipHeader}}
                      {%endif%}
                      {% if config.trimSpace%}
                          TRIM_SPACE = {{ config.trimSpace }}
                      {%endif%}
                      {% if config.replaceinvalidcharacters%}
                          REPLACE_INVALID_CHARACTERS = {{config.replaceinvalidcharacters}}
                      {%endif%}
                      {% if config.stripouterarray and config.fileType in ('JSON')%}
                          STRIP_OUTER_ARRAY = {{config.stripouterarray}}
                      {%endif%}
                                 {% if config.dateformat != "AUTO" and config.dateformat != ""   and config.fileType in ('JSON','CSV')%}
                          DATE_FORMAT = '{{config.dateformat}}'
            	       {% elif config.dateformat == "AUTO" %}
            	         DATE_FORMAT = AUTO
                       {%endif%}
                         {% if config.timeformat != "AUTO" and config.timeformat != ""   and config.fileType in ('JSON','CSV')%}
                          TIME_FORMAT = '{{config.timeformat}}'
            	       {% elif config.timeformat == "AUTO" %}
            	         TIME_FORMAT = AUTO
                       {%endif%}
                       {% if config.timestampformat != "AUTO" and config.timestampformat != ""   and config.fileType in ('JSON','CSV')%}
                          TIMESTAMP_FORMAT = '{{config.timestampformat}}'
            	       {% elif config.timestampformat == "AUTO" %}
            	         TIMESTAMP_FORMAT = AUTO
                       {%endif%})
                    {%endif%}
                    
                    {% if config.onError1 != "" %}
                        {% if config.onError1 in ('SKIP_FILE_<num>','SKIP_FILE_<num>%') %}
                          {% set onErrorReplaced = config.onError1 | replace('<num>', config.errornumber|string) %}
                           ON_ERROR = {{ onErrorReplaced }}
                        {%elif config.onError1 in ('SKIP_FILE_<num>%') %}
                          {% set onErrorReplaced = config.onError1 | replace('<num>', config.errornumber|string) %}
                           ON_ERROR = '{{ onErrorReplaced }}'
                        {%else%}
                           ON_ERROR = {{ config.onError1 }}
                        {%endif%}
                    {%endif%}

                    {% if config.sizeLimit != "" %}
                         SIZE_LIMIT = {{ config.sizeLimit }}
                    {%endif%}
                    {% if config.returnFailedOnly != "" %}
                         RETURN_FAILED_ONLY = {{ config.returnFailedOnly }}
                    {%endif%}
                    {% if config.loadUncertainFiles != ""%}
                          LOAD_UNCERTAIN_FILES = {{ config.loadUncertainFiles }}
                    {%endif%}
                    {% if config.purgeBehavior != "" %}
                          PURGE =  {{ config.purgeBehavior }}
                    {%endif%}
                    {% if config.enforceLength != ""%}
                          ENFORCE_LENGTH = {{ config.enforceLength }}
                    {%endif%}
                    {% if config.truncateColumns != ""%}
                          TRUNCATECOLUMNS = {{ config.truncateColumns }}
                    {%endif%}
                    
                    FORCE = TRUE
             
            {% endif %}
        run:
          templateString: ""
    name: Copy Into - Snowpipe
    version: 1
  StepType-298:
    id: "298"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Copy of External Table
        short: 'EXT'
        tagColor: '#C39BD3'
        isDisabled: false
        plural: External Tables

        deployStrategy: advanced

        config:
        - groupName: File Location
          items: 

          - displayName: Stage Storage Location
            attributeName: stageStorageLocationName
            type: textBox
            default: 'Enter Storage Location name'
            isRequired: true

          - displayName: Stage Name
            attributeName: stageName
            type: textBox
            default: 'stage_name/folder/'
            isRequired: true

          - displayName: File Pattern
            attributeName: filePattern
            type: textBox
            default: ".*[.]json"


        - groupName: File Format 
          items:

          - displayName: File Format Definition
            attributeName: fileFormatType
            type: dropdownSelector
            default: "File Format Name"
            options:
            - File Format Name
            - File Format Values

          - displayName: File Format Name
            attributeName: fileFormatName
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.fileFormatType == 'File Format Name' %} true {% else %} false {% endif %}"

          - displayName: File Type
            attributeName: fileType
            type: dropdownSelector
            default: JSON
            options:
            - "CSV"
            - "PARQUET"
            - "JSON"
            - "AVRO"
            - "ORC"
            isRequired: true

          - displayName: Compression
            attributeName: compression
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV','JSON')) %} true {% else %} false {% endif %}"
            type: dropdownSelector
            default: "AUTO"
            options:
            - "AUTO"
            - "GZIP"
            - "BZ2"
            - "BROTLI"
            - "ZSTD"
            - "DEFLATE"
            - "RAW_DEFLATE"
            - "NONE"
            isRequired: false

          - displayName: Record delimiter
            attributeName: recDelim
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: "\n"
            isRequired: false

          - displayName: Field delimiter
            attributeName: fieldDelim
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: ","
            isRequired: false

          - displayName: Field optionally enclosed by
            attributeName: fieldEnclosed
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: "\\042"
            isRequired: false

          - displayName: Number of header lines to skip
            attributeName: skipHeader
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: "1"
            isRequired: false

          - displayName: Skip blank lines
            attributeName: skipBlankLines
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            type: toggleButton
            default: true
            isRequired: false

          - displayName: Trim space
            attributeName: trimSpace
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            type: toggleButton
            default: true
            isRequired: false

          - displayName: Replace invalid characters
            attributeName: replaceinvalidcharacters
            enableIf: "{% if (config.fileFormatType != 'File Format Name') %} true {% else %} false {% endif %}"
            type: toggleButton
            default: false
            isRequired: false    

          - displayName: Strip Outer Array
            attributeName: stripouterarray
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('JSON')) %} true {% else %} false {% endif %}"
            type: toggleButton
            default: false
            isRequired: false  

        - groupName: Additional Options
          items:
          - displayName: Auto Refresh
            attributeName: autoRefresh
            type: toggleButton
            default: false
            isRequired: false

          - displayName: Cloud Provider
            attributeName: cloudProvider
            type: dropdownSelector
            default: "AWS"
            options:
            - "AWS"
            - "Azure"
            - "GCP"
            enableIf: "{{ config.autoRefresh }}"

          - displayName: AWS SNS Topic
            attributeName: snsTopic
            type: textBox
            enableIf: "{% if config.autoRefresh == true and config.cloudProvider == 'AWS' %} true {% else %} false {% endif %}"
            default: "arn:aws:sns:us-east-1:121674918127:prod-emea-s3-notification"
            isRequired: false

          - displayName: Integration
            attributeName: integration
            type: textBox
            isRequired: false
            enableIf: "{% if config.autoRefresh == true and config.cloudProvider != 'AWS' %} true {% else %} false {% endif %}"

        - groupName: Hidden config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: table
            options:
            - table
            isRequired: true

        systemColumns:

        - displayName: 'VALUE'
          attributeName: 'VALUE'
          transform: ''
          dataType: VARIANT
          placement: beginning

        - displayName: FILENAME
          attributeName: 'METADATA$FILENAME'
          transform: 'METADATA$FILENAME'
          dataType: STRING
          placement: end
      templates:
        create:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Table == #}
            {# == Node Type Description    : This node creates an external table to load  data from a set of one or more files in a specified external stages == #}

            {% if desiredState == currentState %}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% elif desiredState == undefined %}

              {{ stage('Drop External Table') }}
              DROP EXTERNAL TABLE {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}

            {% elif currentState == undefined or (desiredState != currentState )%} 

            #External Stage locations

            {% set stageStorageLocationName = desiredState.config.stageStorageLocationName %}
            {% set dbStage = desiredState.storageLocations | selectattr('name', 'equalto', stageStorageLocationName) | map(attribute='database') | first %}
            {% set schStage = desiredState.storageLocations | selectattr('name', 'equalto', stageStorageLocationName) | map(attribute='schema') | first %}
            {% set ns = namespace(counter=1) %}
             
            {{ stage('Create External Table') }}

             CREATE OR REPLACE EXTERNAL TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}


                {% for col in desiredState.sources[0].columns if (col.name | upper != "VALUE" ) %}
                  {% if loop.first %}({% endif %} 
                  {%if col.name != "FILENAME" %}
                      {% if desiredState.config.fileType == "CSV" %}
            		       "{{ col.name }}" {{ col.dataType }} AS (value:c{{ loop.index }}::{{ col.dataType }})
                       {%else%}
                       "{{ col.name }}" {{ col.dataType }} AS (value:{{ col.name }}::{{ col.dataType }})
                      {%endif%}
            		  {%elif col.name == "FILENAME" %}
            		      "{{ col.name }}" {{ col.dataType }} AS METADATA$FILENAME
            		  {%endif%}
                  {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                  {%- if not loop.last -%}, {% else %}){% endif %}
                {% endfor %}
             
              
              location = @{{ dbStage }}.{{ schStage }}.{{ desiredState.config.stageName }}
              {% if desiredState.config.filePattern %}
              pattern='{{ desiredState.config.filePattern }}'
              {%endif%}
              
              {%- if desiredState.config.fileFormatType == 'File Format Name' %}
                      FILE_FORMAT = (FORMAT_NAME = '{{ dbStage }}.{{ schStage }}.{{ desiredState.config.fileFormatName}}')
              {%else%}
              file_format = (type = {{ desiredState.config.fileType }}
              {% if desiredState.config.fileType == "CSV" %}
                {% if desiredState.config.recDelim != null %}record_delimiter = '{{ desiredState.config.recDelim }}'{% endif %}
                {% if desiredState.config.fieldDelim != null %}field_delimiter = '{{ desiredState.config.fieldDelim }}'{% endif %}
                {% if desiredState.config.fieldEnclosed != null %}field_optionally_enclosed_by = '{{ desiredState.config.fieldEnclosed }}'{% endif %}
                {% if desiredState.config.skipHeader != null %}skip_header = {{ desiredState.config.skipHeader }}{% endif %}
                {% if desiredState.config.skipBlankLines %}skip_blank_lines = {{ desiredState.config.skipBlankLines }}{% endif %}
                {% if desiredState.config.trimSpace %}trim_space = {{ desiredState.config.trimSpace }}{% endif %}
              {% endif %})
              {% endif %}
              auto_refresh = {{ desiredState.config.autoRefresh }}

              {% if desiredState.config.autoRefresh and (desiredState.config.snsTopic != null or desiredState.config.snsTopic !="" )%}
              aws_sns_topic = '{{ desiredState.config.snsTopic }}'{% endif %}

                {% if desiredState.config.autoRefresh and (desiredState.config.integration != null or desiredState.config.integration !="" )%}
              integration = '{{ desiredState.config.integration }}'{% endif %}
              
              {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description }}'{% endif %}

            {%endif%}
        run:
          templateString: ""
    name: External Table
    version: 1
  StepType-299:
    id: "299"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |+
        capitalized: INFERSCHEMA
        short: 'INFER'
        tagColor: '#8AD19D'
        isDisabled: false
        plural: INFERSCHEMA

        deployStrategy: advanced

        config:
        - groupName: Source Data
          items:
          - displayName: Stage Storage Location
            attributeName: stageStorageLocationName
            type: textBox
            default: 'Enter Storage Location name'
            isRequired: true

          - displayName: Stage Name
            attributeName: stageName
            type: textBox
            default: 'stage_name/folder/'
            isRequired: true

          - displayName: File Name(s) ( Ex:a.csv,b.csv)
            attributeName: fileNames
            type: textBox
            isRequired: true
          
          - displayName: File Format Name
            attributeName: fileFormatName
            type: textBox
            default: ""
            isRequired: true


          - displayName: Redeployment Behavior
            attributeName: redeploymentBehavior
            type: dropdownSelector
            default: Create or Replace
            options:
              - Create or Replace
              - Alter existing table
              - Drop existing table
            isRequired: true




      templates:
        create:
          templateString: |-
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Inferschema == #}
            {# == Node Type Description    : This node infers schema of the file in internal or external stage and dynamically creates the target table == #}

            {% if (currentState == undefined and desiredState != undefined) or (currentState != undefined and desiredState != undefined ) %}

            {% set srcSchName = desiredState.node.location.name %}
            {% set db = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0]%}
            {% set sch = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1]%}

            {% set stageStorageLocationName = desiredState.config.stageStorageLocationName %}
            {% set dbStage =  ref_no_link(desiredState.config.stageStorageLocationName, desiredState.node.name).split('.')[0] %}
            {% set schStage =  ref_no_link(desiredState.config.stageStorageLocationName, desiredState.node.name).split('.')[1]%}


            {%- if ","  in desiredState.config.fileNames %} 
                {% set formatted_variable = desiredState.config.fileNames.split(',') | map('string') | join("'',''") %}
                 {% set final_variable = "'" + formatted_variable + "'" %}
                {% set fileNameSQL = " "+"FILES =>'"+ final_variable + "'," %} 
            {%- elif  desiredState.config.fileNames  -%}
                {% set fileNameSQL = " "+"FILES =>''"+desiredState.config.fileNames+"''," %}
            {% endif %}


            {% if currentState == undefined or desiredState.config.redeploymentBehavior == 'Create or Replace' %}

            # Infers schema of the file in internal or external stage and dynamically creates the target table

             {{ stage('Infer schema and Create target table') }}
             -- Anonymous stored procedure block
             DECLARE
              -- Variables
              col_name VARCHAR;
              col_type VARCHAR;
              create_sql VARCHAR;
              final_sql VARCHAR;
              
              -- Cursor to loop through each row in GROUP_LOAD table
              res RESULTSET;
              select_statement := 'CREATE OR REPLACE TABLE {{db}}.{{sch}}.{{desiredState.node.name}}
                                   USING TEMPLATE (SELECT ARRAY_AGG(OBJECT_CONSTRUCT(*))
                                  FROM TABLE(
                                    INFER_SCHEMA(
                                      LOCATION=>''@{{ dbStage }}.{{ schStage }}.{{ desiredState.config.stageName }}'',
                                      {{fileNameSQL }}
                                      FILE_FORMAT=>''{{ dbStage }}.{{ schStage }}.{{ desiredState.config.fileFormatName}}''
                                    )
                                  ))';
              
              BEGIN
                      
                EXECUTE IMMEDIATE :select_statement ;
            	
            	 -- Return a success message
                RETURN '{{desiredState.node.name}} table created successfully.';

              END;

            {%elif currentState != undefined and desiredState.config.redeploymentBehavior == 'Alter existing table' %}

            # Infers schema of the file in internal or external stage and alters the existing table on comparing the dynamically created table and changes in file structure if any


                 {{ stage('Infer schema and Alter target table') }}
                 
             -- Anonymous stored procedure block
            DECLARE
              -- Variables
              col_name VARCHAR;
              col_type VARCHAR;

              res RESULTSET;
              res2 RESULTSET;
              
              columnlsadd STRING := 'SELECT COLUMN_NAME,TYPE
                                  FROM TABLE(
                                    INFER_SCHEMA(
                                     LOCATION=>''@{{ dbStage }}.{{ schStage }}.{{ desiredState.config.stageName }}'',
                                      {{fileNameSQL }}
                                      FILE_FORMAT=>''{{ dbStage }}.{{ schStage }}.{{ desiredState.config.fileFormatName}}''
                                    )
                                  )where COLUMN_NAME not in (SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ''{{sch|replace('"', '') }}'' 
                                      AND TABLE_NAME = ''{{desiredState.node.name}}'')';

              columnlsrm STRING  := 'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ''{{sch|replace('"', '') }}'' 
                                      AND TABLE_NAME = ''{{desiredState.node.name}}''AND COLUMN_NAME not in (SELECT COLUMN_NAME
                                  FROM TABLE(
                                    INFER_SCHEMA(
                                      LOCATION=>''@{{ dbStage }}.{{ schStage }}.{{ desiredState.config.stageName }}'',
                                      {{fileNameSQL }}
                                      FILE_FORMAT=>''{{ dbStage }}.{{ schStage }}.{{ desiredState.config.fileFormatName}}''
                                    )))';

            BEGIN
              -- Execute the dynamic SQL statement to retrieve column names

              EXECUTE IMMEDIATE 'Use {{db}}' ;
             
              res := (EXECUTE IMMEDIATE columnlsrm);
              res2 := (EXECUTE IMMEDIATE columnlsadd);

              -- Loop through each row in the result set
              FOR col IN res DO
                -- Drop existing columns
                EXECUTE IMMEDIATE 'ALTER TABLE {{db}}.{{sch}}.{{desiredState.node.name}} DROP COLUMN "' ||col.COLUMN_NAME||'"';
              END FOR;

                -- Loop through each row in the result set
              FOR col IN res2 DO
                -- Drop existing columns
                EXECUTE IMMEDIATE 'ALTER TABLE {{db}}.{{sch}}.{{desiredState.node.name}} ADD COLUMN "' ||col.COLUMN_NAME||'"' ||  col.TYPE;
              END FOR;
              
              -- Return a success message
              RETURN 'Columns added and dropped successfully.';

            END; 

            {%elif currentState != undefined and desiredState.config.redeploymentBehavior == 'Drop existing table' %}

            # Drops the dynamically created table based on inferred schema

                {# Table or View Name #}
                {% set targetObjectDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetObjectSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetObjectName = ref_no_link(currentState.node.location.name, currentState.node.name) %}
                
                {{ stage('Drop inferred table' , true, "sql", "drop") }}
                   DROP TABLE IF EXISTS {{ fullyQualifiedTargetObjectName }}


            {%endif%}

            {% else %}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}
        run:
          templateString: ""
    name: Inferschema
    version: 1
  StepType-Dimension:
    id: Dimension
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {# The if-block below avoids unnecessary updates when no type 2 column changes are present #}
                        {% if source.columns 
                            | rejectattr('isSurrogateKey')
                            | rejectattr('isBusinessKey')
                            | rejectattr('isChangeTracking')
                            | rejectattr('isSystemVersion')
                            | rejectattr('isSystemCurrentFlag')
                            | rejectattr('isSystemStartDate')
                            | rejectattr('isSystemEndDate')
                            | rejectattr('isSystemCreateDate')
                            | rejectattr('isSystemUpdateDate') 
                            | list | length == 0 
                        %}
                            {# Skip Section #}
                        {% else %}
                          UNION ALL
                          /* Rows Needing To Be Updated Due To Changes To Non-Type-2 columns
                          This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                          SELECT
                          {%- for col in source.columns if not col.isSurrogateKey %}
                              {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                  "DIM"."{{ col.name }}"
                              {% elif col.isSystemCurrentFlag %}
                                  'Y'
                              {% else %}
                                  {{ get_source_transform(col) }}
                              {% endif %}
                              AS "{{ col.name }}",
                          {% endfor -%}
                              'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                          {{ source.join }}
                          INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                          {% for col in source.columns if col.isBusinessKey -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %}
                          WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                          AND (
                          {% for col in source.columns if (col.isChangeTracking) -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %} )
                          {% for col in source.columns if not (   col.isBusinessKey or
                                                                  col.isChangeTracking or
                                                                  col.isSurrogateKey or
                                                                  col.isSystemVersion or
                                                                  col.isSystemCurrentFlag or
                                                                  col.isSystemStartDate or
                                                                  col.isSystemEndDate or
                                                                  col.isSystemUpdateDate or
                                                                  col.isSystemCreateDate) -%}
                              {% if loop.first %}
                                  AND (
                              {% endif %}
                              {% if not loop.first %}
                                  OR
                              {% endif %}
                              NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                              {% if loop.last %}
                                  )
                              {% endif %}
                          {% endfor %}
                        {% endif %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension
    version: 1
  StepType-Fact:
    id: Fact
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Fact
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |2-

                {% if node.materializationType == 'table' %}
                    {{ stage('Create Fact Table') }}
                
                    CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                
                
                {% elif node.materializationType == 'view' %}
                    {{ stage('Create Fact View') }}
                
                    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                    AS
                    {% for source in sources %}
                
                        {% if loop.first %}SELECT {% endif %}
                
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                
                        {% if not loop.last %} UNION ALL {% endif %}
                    {% endfor %}
                
                {% endif %}
                
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                    
                    {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
                    
                    {% for source in sources %}
                    
                        {% if has_business_key %}
                    
                            {{ stage('MERGE ' + source.name | string ) }}
                            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                            USING (
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }})
                                AS "SRC"
                            ON
                            {% for col in source.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                            {% endfor %}
                            WHEN MATCHED
                            {% for col in source.columns if not (   col.isBusinessKey or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            THEN UPDATE SET
                            {%- for col in source.columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            WHEN NOT MATCHED THEN
                            INSERT (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                            VALUES (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                    
                        {% else %}
                    
                            {{ stage('Insert ' + source.name | string ) }}
                    
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                    
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                        {% endif %}
                    {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}

                {% if config.testsEnabled %}
                    {% for test in node.tests %}
                        {% if test.runOrder == 'After' %}
                            {{ test_stage(test.name, test.continueOnFailure) }}
                            {{ test.templateString }}
                        {% endif %}
                    {% endfor %}

                    {% for column in columns %}
                        {% for test in column.tests %}
                            {{ test_stage(column.name + ": " + test.name) }}
                            {{ test.templateString }}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
                
                
    name: Fact
    version: 1
  StepType-Source:
    id: Source
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Source
        short: null
        tagColor: '#D26000'
        plural: Sources
      templates:
        create:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
        run:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
    name: Source
    version: 1
  StepType-Stage:
    id: Stage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage
    version: 1
  StepType-View:
    id: View
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: View
    version: 1
  StepType-persistentStage:
    id: persistentStage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Persistent Stage
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Persistent Stage
    version: 1
subgraphs: {}
version: 2
