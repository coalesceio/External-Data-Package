{#
    Copyright (c) 2023 Coalesce. All rights reserved.
This script and its associated documentation are confidential and proprietary to Coalesce.
Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
does not permit copying or modification for any other purpose.  
#}
{# == Node Type Version        : 1  == #}
{# == Node Type Name           : API == #}
{# == Node Type Description    : This node creates target table to load data from API URL == #}


{% if desiredState == currentState %}

{{ stage('Nothing to do.') }}
select 1 = 0

{% elif desiredState %}  
	 
	{%if currentState == undefined or (currentState != undefined and desiredState!=currentState) %}

{{ stage('Create Python Procedure ') }}

CREATE OR REPLACE PROCEDURE {{ ref_no_link(desiredState.node.location.name, 'UPDATENODE_' + desiredState.node.name | upper) | trim }}(wsID varchar,nodeName varchar,nodeDetails VARIANT)
RETURNS STRING
language python
runtime_version=3.8
handler = 'nodeFrame'
external_access_integrations=({{desiredState.config.extIntegration}})
packages = ('snowflake-snowpark-python','requests','pandas')
secrets = ('token' = {{desiredState.config.api}})
execute as owner
as
$$
import _snowflake
import requests
import json
import uuid
import snowflake.snowpark as snowpark
from snowflake.snowpark import Session

from snowflake.snowpark.functions import sql_expr
from snowflake.snowpark.functions import lit 

def nodeFrame(wsID,nodeName,nodeDetails):
    token = _snowflake.get_generic_secret_string('token')
    nodes_url = "https://app.coalescesoftware.io/api/v1/workspaces/" + wsID + "/nodes?detail=false"
    node_url = "https://app.coalescesoftware.io/api/v1/workspaces/" + wsID + "/nodes/"

    headers = {
    "accept": "application/json",
    "content-type": "application/json",
    "authorization": "Bearer" + token }

    nodes_response = requests.get(nodes_url, headers=headers)
    j_nodes = json.loads(nodes_response.text)
    for node in j_nodes["data"]: 
    
    # Find node(s) we are interested in
        if node["name"] in nodeName:
        
            # Get Node details
            get_node_url = node_url + node["id"]
            node_response = requests.get(get_node_url, headers=headers)
            j_node = json.loads(node_response.text)

            nodeDetails_list = nodeDetails["columns"]
            
            for col in nodeDetails_list:
                column_uuid = uuid.uuid4()
                columnID = str(column_uuid)
        
                json_string = json.dumps(col)
                json_object= json.loads(json_string)
                
                column = {
                    'columnID': columnID,
                    'dataType': json_object["datatype"],
                    'description': 'Generated from python',
                    'isBusinessKey': False,
                    'name': json_object["name"],
                    'nullable': True}
                j_node["metadata"]["columns"].append(column)  

    #dataframe_test = snowpark_session.table(nodeName).filter(col("language") == 'python')

        
    write_response = requests.put(get_node_url, headers=headers, data=json.dumps(j_node))

    #return dataframe_test.columns

$$;

{%endif%}

{%elif  currentState != undefined and desiredState == undefined%}

        {{ stage('Drop procedure', true, "sql", "drop") }}
         DROP PROCEDURE IF EXISTS {{ ref_no_link(currentState.node.location.name, 'PROC_' + currentState.node.name | upper) | trim }}()


{%endif%}