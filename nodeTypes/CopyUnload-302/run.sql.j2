{#
    Copyright (c) 2023 Coalesce. All rights reserved.
This script and its associated documentation are confidential and proprietary to Coalesce.
Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
does not permit copying or modification for any other purpose.  
#}
{# == Node Type Version        : 1  == #}
{# == Node Type Name           : Copy Unload == #}
{# == Node Type Description    : This node unloads data from table into CSV/PARQUET/JSON files == #}

{# Source location#}

{% set srcSchName = node.location.name %}
{% set db = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
{% set sch = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}


{# File format locations#}

{% set fileFormatLocationName = config.fileFormatLoc %}
{% set dbff = storageLocations | selectattr('name', 'equalto',fileFormatLocationName) | map(attribute='database') | first %}
{% set schff = storageLocations | selectattr('name', 'equalto',fileFormatLocationName) | map(attribute='schema') | first %}

{# File location with folder#}

{% set folderLoc = [] %}
{% set parts = config.fileLocation.split("/") %}
{% set fileLoc = parts[0] %}
{% set num = parts | length %}
{% if num>1 %}
{% for i in range(1,num) %}
{% set folderLoc= folderLoc.append(parts[i]) %}
{% endfor %}
{% set folderLoc=folderLoc | join('/')|trim %}
{%endif%}
                      
{% set loc_stage = ref_no_link(config.stageStorageLocationName, fileLoc) | trim | upper %}
{% set loc_folder = folderLoc | trim %}
{% set loc_file = node.name | trim %}
{%if folderLoc != []%}
  {% set locname = loc_stage|trim~"/"~loc_folder|trim~"/"~loc_file|trim %}
{%else%}
  {% set locname = loc_stage|trim~"/"~loc_file|trim %}
{%endif%}

{# Figure out Partition by Clause#}

        {% set nsVariables = namespace(partitionBySQL="") %}
        {% if config.partitionConfig == true %}
            {% if config.partitionConfigExpressions == true %}
                {% set column, expression = config.partitionbyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, config.partitionbyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                {%- set nsVariables = namespace(partitionValues=[]) %}

                {% for r in column %}
                    {% if expression[loop.index0] == "" %}
                        {% set nsVariables.partitionValues = nsVariables.partitionValues + [r] %}
                    {% else %}
                        {% set nsVariables.partitionValues = nsVariables.partitionValues + [expression[loop.index0]] %}
                    {% endif %}
                {% endfor %}

                {% set nsVariables.partitionBySQL = 'PARTITION BY (' + nsVariables.partitionValues | join('||') + ')' %}

            {% else %}

                {% set column = config.partitionbyConfig.get('items') | map(attribute='columnName.name') | list %}

                {%- set nsVariables = namespace(partitionValues=[]) %}

                {% for r in column %}
                    {% set nsVariables.partitionValues = nsVariables.partitionValues +  [r] %}
                {% endfor %}

                {% set nsVariables.partitionBySQL = 'PARTITION BY ( to_varchar(' + nsVariables.partitionValues | join('||') + '))' %}

            {% endif %}
        {% endif %}



{{ stage('Unloading ' + node.name | string ) }}

 {% for source in sources %}
    {% for dep in source.dependencies if dep.node %}
                            
        COPY INTO @{{locname|trim}}{% if config.singleFile %}.{{ config.fileType | lower }}{% endif %}
        FROM( SELECT 
             {%- for col in sources[0].columns %}
             {%if config.fileType in  ('JSON')%}
                  {%if col.transform != ""%}
	                  to_variant({{ col.transform }})
                  {%else%}
                     to_variant({{ col.name }})
                  {%endif%}
              {%else%}
                  {%if col.transform != ""%}
	             {{ get_source_transform(col) }} AS "{{ col.name }}"

                  {%else%}
                     {{ get_source_transform(col) }} AS "{{ col.name }}"
                  {%endif%}
              {%endif%}
            {%- if not loop.last -%}, {% endif %}
            {%- endfor %}
        FROM {{ ref_no_link(dep.node.location.name, dep.node.name) | upper }} 
        )
        {{ nsVariables.partitionBySQL}}
         {%- if config.fileFormatType == 'File Format Name' %}
          FILE_FORMAT = (FORMAT_NAME = '{{ dbff }}.{{ schff }}.{{ config.fileFormatName}}')
         {%else%}
            FILE_FORMAT = ( TYPE = {{ config.fileType}}
             {% if config.compression != ""  and config.fileType in ('CSV','JSON') %}
              COMPRESSION = {{ config.compression }}
             {%endif%}
             {% if config.compression1 != ""  and config.fileType in ('PARQUET')%}
              COMPRESSION = {{ config.compression1 }}
             {%endif%}				 
             {% if config.recDelim and config.fileType in ('CSV')%}
              RECORD_DELIMITER = '{{ config.recDelim}}'
             {%endif%}
            {% if config.fieldDelim and config.fileType in ('CSV')%}
              FIELD_DELIMITER = '{{ config.fieldDelim}}'
            {%endif%}
            {% if config.fieldEnclosed and config.fileType in ('CSV')%}
               FIELD_OPTIONALLY_ENCLOSED_BY ='{{ config.fieldEnclosed }}'
           {%endif%}
            {% if config.dateformat != "AUTO" and config.dateformat != ""   and config.fileType in ('CSV')%}
              DATE_FORMAT = '{{ config.dateformat}}'
	       {% elif config.dateformat == "AUTO" and config.fileType in ('CSV') %}
	         DATE_FORMAT = AUTO
           {%endif%}
             {% if config.timeformat != "AUTO" and config.timeformat != ""   and config.fileType in ('CSV')%}
              TIME_FORMAT = '{{config.timeformat}}'
	       {% elif config.timeformat == "AUTO" and config.fileType in ('CSV')%}
	         TIME_FORMAT = AUTO
           {%endif%}
           {% if config.timestampformat != "AUTO" and config.timestampformat != ""   and config.fileType in ('CSV')%}
              TIMESTAMP_FORMAT = '{{config.timestampformat}}'
	         {% elif config.timestampformat == "AUTO" and config.fileType in ('CSV') %}
	         TIMESTAMP_FORMAT = AUTO
           {%endif%})
        {%endif%}
        overwrite = {{ config.overwriteFiles }}
        single = {{ config.singleFile }}
        max_file_size = {{ config.sizeLimit | int * 1024 * 1024 }} 
        {% if config.partitionConfig == true %}
         include_query_id = true
        {%else%}
        include_query_id = {{ config.queryId }}
        {%endif%}
        detailed_output = {{ config.detailedOutput }}
        header ={{ config.header }}
    {% endfor %}
{% endfor %}

{{stage('Result')}}

DECLARE

  list_cmd := 'LIST @{{locname|trim}}{% if config.singleFile %}.{{ config.fileType | lower }}{%endif%}';
BEGIN

  -- Step 1: Run LIST
  EXECUTE IMMEDIATE :list_cmd ;

  -- Step 2: Insert results into table from RESULT_SCAN
  EXECUTE IMMEDIATE 'CREATE OR REPLACE TABLE {{ref_no_link(node.location.name, node.name)}} AS 
SELECT 
   *
    FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))';

  RETURN 'File list updated successfully.';
END;

