{#
    Copyright (c) 2023 Coalesce. All rights reserved.
This script and its associated documentation are confidential and proprietary to Coalesce.
Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
does not permit copying or modification for any other purpose.  
#}
{# == Node Type Version        : 1  == #}
{# == Node Type Name           : Inferschema == #}
{# == Node Type Description    : This node infers schema of the file in internal or external stage and dynamically creates the target table == #}
{#Release date:20241203  Version:1.1.6 Released By:AS  Description: Materialization type added and Re-Sync buttton enabled#}

{% if (currentState == undefined and desiredState != undefined) or (currentState != undefined and desiredState != undefined and desiredState != currentState ) %}

{% set srcSchName = desiredState.node.location.name %}
 {% set db = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0]%}
                           {% set sch = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1]%}

                           {% set stageStorageLocationName = desiredState.config.stageStorageLocationName %}
                           {% set dbStage =  ref_no_link(desiredState.config.stageStorageLocationName, desiredState.node.name).split('.')[0] %}
                           {% set schStage =  ref_no_link(desiredState.config.stageStorageLocationName, desiredState.node.name).split('.')[1]%}

                            # File format locations
                         {%-if desiredState.config.fileFormatType == 'File Format Name'-%}
                           {% set fileFormatLocationName = desiredState.config.fileFormatLoc %}
                           {% set dbff = desiredState.storageLocations | selectattr('name', 'equalto',fileFormatLocationName) | map(attribute='database') | first %}
                           {% set schff = desiredState.storageLocations | selectattr('name', 'equalto',fileFormatLocationName) | map(attribute='schema') | first %}
                        {%else%}
                            {% set fileFormatLocationName = desiredState.node.location.name %}
                           {% set dbff = desiredState.storageLocations | selectattr('name', 'equalto',fileFormatLocationName) | map(attribute='database') | first %}
                           {% set schff = desiredState.storageLocations | selectattr('name', 'equalto',fileFormatLocationName) | map(attribute='schema') | first %}
                        {%endif%}
 
{%- if ","  in desiredState.config.fileNames %} 
    {% set formatted_variable = desiredState.config.fileNames.split(',') | map('string') | join("'',''") %}
     {% set final_variable = "'" + formatted_variable + "'" %}
    {% set fileNameSQL = " "+"FILES =>'"+ final_variable + "'," %} 
{%- elif  desiredState.config.fileNames  -%}
    {% set fileNameSQL = " "+"FILES =>''"+desiredState.config.fileNames+"''," %}
{% endif %}

 # File format sql
                         {%-if desiredState.config.fileFormatType == 'File Format Values'-%}
                            {%set fileformatsql = "'CREATE OR REPLACE TEMPORARY FILE FORMAT " +"\""+dbff+"\".\""+schff+"\".\"TEMP_"+desiredState.config.fileType+"_"+desiredState.node.name+"\""%}

                            {%set fileformatsql = fileformatsql + "\n"+ "TYPE" + " =''"+ desiredState.config.fileType+"''"%}

                            {% if desiredState.config.compression != "" %}
                                {%set fileformatsql = fileformatsql + "\n"+ "COMPRESSION"+ "=''"+ desiredState.config.compression+"''"%}
                            {%endif%}			 
                            {% if desiredState.config.recDelim and desiredState.config.fileType in ('CSV')%}
                               {%set fileformatsql = fileformatsql + "\n"+ "RECORD_DELIMITER"+ "=''"+ desiredState.config.recDelim+"''"%}
                            {%endif%}
                            {% if desiredState.config.fieldDelim and desiredState.config.fileType in ('CSV')%}
                                {%set fileformatsql = fileformatsql + "\n"+ "FIELD_DELIMITER"+ "=''"+ desiredState.config.fieldDelim+"''"%}
                            {%endif%}
                            {% if desiredState.config.fieldEnclosed and desiredState.config.fileType in ('CSV')%}
                                {%set fileformatsql = fileformatsql + "\n"+ "FIELD_OPTIONALLY_ENCLOSED_BY"+ "=''"+ desiredState.config.fieldEnclosed+"''"%}
                            {%endif%}
                            {% if desiredState.config.parsehdr and  desiredState.config.fileType in ('CSV')%}
                              {%set fileformatsql = fileformatsql + "\n"+ "PARSE_HEADER" + "="+ "TRUE"+""%}
                            {%endif%}
                            {% if desiredState.config.encoding != "" and  desiredState.config.fileType in ('CSV') %}
                                {%set fileformatsql = fileformatsql + "\n"+ "ENCODING"+ "=''"+ desiredState.config.encoding+"''"%}
                            {%endif%}
                            {% if desiredState.config.replaceinvalidcharacters%}
                                 {%set fileformatsql = fileformatsql + "\n"+ "REPLACE_INVALID_CHARACTERS" + "="+ "TRUE" +""%}
                            {%endif%}
                            {%if desiredState.config.columnmismatch and desiredState.config.fileType in ('CSV')%}
                                {%set fileformatsql = fileformatsql + "\n"+ "ERROR_ON_COLUMN_COUNT_MISMATCH" + "="+ "TRUE" +""%}
                            {%endif%}
                            {% if desiredState.config.stripouterarray == true and desiredState.config.fileType in ('JSON')%}
                              {%set fileformatsql = fileformatsql + "\n"+ "STRIP_OUTER_ARRAY" + "="+ "TRUE" +""%}
                            {%endif%}
                            {%if  desiredState.config.usevectscan == true and  desiredState.config.fileType in ('PARQUET')%}
                              {%set fileformatsql = fileformatsql + "\n"+ "USE_VECTORIZED_SCANNER" + "="+ "TRUE" +""%}
                            {%endif%}
                             {% if desiredState.config.emptyfield and  desiredState.config.fileType in ('CSV')%}
                              {%set fileformatsql = fileformatsql + "\n"+ "EMPTY_FIELD_AS_NULL" + "="+ "TRUE"+""%}
                            {%endif%}
                            {% if desiredState.config.bytemark and  desiredState.config.fileType in ('CSV')%}
                              {%set fileformatsql = fileformatsql + "\n"+ "SKIP_BYTE_ORDER_MARK" + "="+ "TRUE"+""%}
                            {%endif%}
                            {% if desiredState.config.escapeenclosed != "" and  desiredState.config.fileType in ('CSV')%}
                              {%set fileformatsql = fileformatsql + "\n"+ "ESCAPE_UNENCLOSED_FIELD" + "=''\\\\"+ desiredState.config.escapeenclosed+"''"%}
                            {%endif%}
                            {% if desiredState.config.escapeval != "" and  desiredState.config.fileType in ('CSV')%}
                              {%set fileformatsql = fileformatsql + "\n"+ "ESCAPE" + "=''"+ desiredState.config.escapeval +"''"%}
                            {%endif%}
                            {% if desiredState.config.binformat != "" and  desiredState.config.fileType in ('CSV')%}
                              {%set fileformatsql = fileformatsql + "\n"+ "BINARY_FORMAT" + "=''"+ desiredState.config.binformat +"''"%}
                            {%endif%}
                            {% if desiredState.config.mulline and  desiredState.config.fileType in ('CSV')%}
                              {%set fileformatsql = fileformatsql + "\n"+ "MULTI_LINE" + "="+ "TRUE"+""%}
                            {%endif%}
                            {%set fileformatsql =  fileformatsql + "\n"+ "'" %}
                          {%endif%}   
                           
                        {#Subfolder path #}
                        {%set subf = ""%}
                        {% set subfolder_value = desiredState.config.subfolder | default('') %}
                        {%if desiredState.config.subfolder == "" %}
                            {%set subf = "" %}
                        {%elif desiredState.config.subfolder == None%}
                            {%set subf = "" %}
                        {%else%}
                          {%set subf = "/"+ subfolder_value %}
                        {%endif%}

                        {%- if ","  in desiredState.config.fileNames %} 
                               {% set formatted_variable = desiredState.config.fileNames.split(',') | map('string') | join("'',''") %}
                               {% set final_variable = "''" + formatted_variable + "''" %}
                               {% set fileNameSQL = " "+"FILES =>"+""+final_variable + "," %} 
                           {%- elif  desiredState.config.fileNames  -%}
                               {% set fileNameSQL = " "+"FILES =>"+"''"+desiredState.config.fileNames+"''," %}
                           {% endif %}
                

{% if currentState == undefined or desiredState.config.redeploymentBehavior == 'Create or Replace' %}

# Infers schema of the file in internal or external stage and dynamically creates the target table

                    
        {{ stage('Create inferred  '+ ' {{desiredState.node.materializationType}}' , true, "sql", "create") }}

           -- Anonymous stored procedure block
              DECLARE
           -- Variables
              col_name VARCHAR;
              col_type VARCHAR;
              create_sql VARCHAR;
              final_sql VARCHAR;
              alter_sql VARCHAR;
            {%if (desiredState.config.fileFormatType == 'File Format Name' and desiredState.config.fileType == 'CSV' )-%}
              file_format_options VARIANT;
            {%-endif%}
               
            -- Create statement for inferring structure
                res RESULTSET;
             {%if desiredState.config.fileFormatType == 'File Format Values' or (desiredState.config.fileFormatType == 'File Format Name' and desiredState.config.fileType == 'CSV' )-%}
                 select_statement := 'CREATE OR REPLACE {{desiredState.node.materializationType}} {{db}}.{{sch}}."{{desiredState.node.name}}"
                       USING TEMPLATE (SELECT ARRAY_AGG(OBJECT_CONSTRUCT(*))
                      FROM TABLE(
                        INFER_SCHEMA(
                          LOCATION=>''@{{ dbStage }}.{{ schStage }}.{{ desiredState.config.stageName }}{{subf}}'',
                          {{fileNameSQL }}
                          FILE_FORMAT=>''"{{ dbff }}"."{{ schff }}"."TEMP_{{ desiredState.config.fileType}}_{{desiredState.node.name}}"''
                        )
                      ))';
              {%else%}
                    select_statement := 'CREATE OR REPLACE {{desiredState.node.materializationType}} {{db}}.{{sch}}."{{desiredState.node.name}}"
                       USING TEMPLATE (SELECT ARRAY_AGG(OBJECT_CONSTRUCT(*))
                      FROM TABLE(
                        INFER_SCHEMA(
                          LOCATION=>''@{{ dbStage }}.{{ schStage }}.{{ desiredState.config.stageName }}{{subf}}'',
                          {{fileNameSQL }}
                          FILE_FORMAT=>''"{{ dbff }}"."{{ schff }}"."{{ desiredState.config.fileFormatName}}"''
                        )
                      ))';
              {%endif%}
  
            BEGIN

            {%if desiredState.config.fileFormatType == 'File Format Name' and desiredState.config.fileType == 'CSV'%}
             
             -- Step 1: Run DESCRIBE to set LAST_QUERY_ID()
             EXECUTE IMMEDIATE 'DESCRIBE FILE FORMAT "{{dbff}}"."{{schff}}"."{{desiredState.config.fileFormatName}}"';


            -- Step 2: Form file format JSON string 
            SELECT PARSE_JSON(
               '{' || LISTAGG(
                 '"' || "property" || '": "' || "property_value" || '"',
                 ', '
                ) || '}'
               ) INTO file_format_options
            FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));


              --Create temporary file format for inferring table structure 
              EXECUTE IMMEDIATE 'CREATE OR REPLACE FILE FORMAT "ANANDHIS_DEV"."SOURCE_DATA"."TEMP_{{ desiredState.config.fileType}}_{{desiredState.node.name}}"
              TYPE =''CSV''
              RECORD_DELIMITER=''' || file_format_options:RECORD_DELIMITER || '''
              FIELD_DELIMITER=''' || file_format_options:FIELD_DELIMITER || '''                                    
			        FIELD_OPTIONALLY_ENCLOSED_BY='''||file_format_options:FIELD_OPTIONALLY_ENCLOSED_BY || '''
			        BINARY_FORMAT =''' || file_format_options:BINARY_FORMAT || '''
              COMPRESSION = ''' || file_format_options:COMPRESSION || '''
              ENCODING = ''' || file_format_options:ENCODING || '''
			        PARSE_HEADER = {{desiredState.config.parsehdr1}}
              REPLACE_INVALID_CHARACTERS = TRUE
              ERROR_ON_COLUMN_COUNT_MISMATCH=FALSE
              ESCAPE = ''' || file_format_options:ESCAPE || '''
              ESCAPE_UNENCLOSED_FIELD = ''\\' || file_format_options:ESCAPE_UNENCLOSED_FIELD || ''' 
              TRIM_SPACE = '|| file_format_options:TRIM_SPACE ||'
              EMPTY_FIELD_AS_NULL = '|| file_format_options:EMPTY_FIELD_AS_NULL ||'
              SKIP_BYTE_ORDER_MARK = '|| file_format_options:SKIP_BYTE_ORDER_MARK ||'
              MULTI_LINE = '|| file_format_options:MULTI_LINE ||''
              ;

            {%endif-%}
          
            {%if desiredState.config.fileFormatType == 'File Format Values'-%}
                      -- Create temporary file format
                       EXECUTE IMMEDIATE {{fileformatsql}};
            {%- endif %}
              
              
              EXECUTE IMMEDIATE :select_statement ;
	
	         
            {%if desiredState.config.fileFormatType == 'File Format Values' or (desiredState.config.fileFormatType == 'File Format Name' and desiredState.config.fileType == 'CSV' )-%}
                -- Drop the temporary file format
               EXECUTE IMMEDIATE 'DROP FILE FORMAT IF EXISTS "{{ dbff }}"."{{ schff }}"."TEMP_{{ desiredState.config.fileType}}_{{desiredState.node.name}}"';
            {%endif%}

            -- Return a success message
              RETURN '{{desiredState.node.name}} table created successfully.';
            END;

{%elif currentState != undefined and desiredState.config.redeploymentBehavior == 'Alter existing table' %}

# Infers schema of the file in internal or external stage and alters the existing table on comparing the dynamically created table and changes in file structure if any


     {{ stage('Infer schema and Alter target table') }}
     
 -- Anonymous stored procedure block
DECLARE
  -- Variables
  col_name VARCHAR;
  col_type VARCHAR;
  res RESULTSET;
  res2 RESULTSET;

  {%if (desiredState.config.fileFormatType == 'File Format Name' and desiredState.config.fileType == 'CSV' )-%}
              file_format_options VARIANT;    
  {%-endif%}
  
  
                  columnlsadd STRING := 'SELECT COLUMN_NAME,TYPE
                      FROM TABLE(
                        INFER_SCHEMA(
                         LOCATION=>''@{{ dbStage }}.{{ schStage }}.{{ desiredState.config.stageName }}'',
                          {{fileNameSQL }}
                          FILE_FORMAT=>''{{ dbff }}.{{ schff }}.{{ desiredState.config.fileFormatName}}''
                        )
                      )where COLUMN_NAME not in (SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ''{{sch|replace('"', '') }}'' 
                          AND TABLE_NAME = ''{{desiredState.node.name}}''';


               {% if desiredState.config.fileFormatType == 'File Format Values' or (desiredState.config.fileFormatType == 'File Format Name' and desiredState.config.fileType == 'CSV' )-%}
                      
                      columnlsrm STRING  := 'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ''{{sch|replace('"', '') }}'' 
                          AND TABLE_NAME = ''{{desiredState.node.name}}''AND COLUMN_NAME not in (SELECT COLUMN_NAME
                      FROM TABLE(
                        INFER_SCHEMA(
                          LOCATION=>''@{{ dbStage }}.{{ schStage }}.{{ desiredState.config.stageName }}'',
                          {{fileNameSQL }}
                          FILE_FORMAT=>''"{{ dbff }}"."{{ schff }}"."TEMP_{{ desiredState.config.fileType}}_{{desiredState.node.name}}"''
                        )))';

                {%else%}
                      columnlsrm STRING  := 'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = ''{{sch|replace('"', '') }}'' 
                          AND TABLE_NAME = ''{{desiredState.node.name}}''AND COLUMN_NAME not in (SELECT COLUMN_NAME
                      FROM TABLE(
                        INFER_SCHEMA(
                          LOCATION=>''@{{ dbStage }}.{{ schStage }}.{{ desiredState.config.stageName }}'',
                          {{fileNameSQL }}
                          FILE_FORMAT=>''"{{ dbff }}"."{{ schff }}"."{{ desiredState.config.fileFormatName}}"''
                        )))';

                 {%endif%}

           
        BEGIN

            {%if desiredState.config.fileFormatType == 'File Format Name' and desiredState.config.fileType == 'CSV'%}
             
             -- Step 1: Run DESCRIBE to set LAST_QUERY_ID()
             EXECUTE IMMEDIATE 'DESCRIBE FILE FORMAT "{{dbff}}"."{{schff}}"."{{desiredState.config.fileFormatName}}"';


            -- Step 2: Form file format JSON string 
            SELECT PARSE_JSON(
               '{' || LISTAGG(
                 '"' || "property" || '": "' || "property_value" || '"',
                 ', '
                ) || '}'
               ) INTO file_format_options
            FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));


              --Create temporary file format for inferring table structure 
              EXECUTE IMMEDIATE 'CREATE OR REPLACE FILE FORMAT "ANANDHIS_DEV"."SOURCE_DATA"."TEMP_{{ desiredState.config.fileType}}_{{desiredState.node.name}}"
              TYPE =''CSV''
              RECORD_DELIMITER=''' || file_format_options:RECORD_DELIMITER || '''
              FIELD_DELIMITER=''' || file_format_options:FIELD_DELIMITER || '''                                    
			        FIELD_OPTIONALLY_ENCLOSED_BY='''||file_format_options:FIELD_OPTIONALLY_ENCLOSED_BY || '''
			        BINARY_FORMAT =''' || file_format_options:BINARY_FORMAT || '''
              COMPRESSION = ''' || file_format_options:COMPRESSION || '''
              ENCODING = ''' || file_format_options:ENCODING || '''
			        PARSE_HEADER = {{desiredState.config.parsehdr1}}
              REPLACE_INVALID_CHARACTERS = TRUE
              ERROR_ON_COLUMN_COUNT_MISMATCH=FALSE
              ESCAPE = ''' || file_format_options:ESCAPE || '''
              ESCAPE_UNENCLOSED_FIELD = ''\\' || file_format_options:ESCAPE_UNENCLOSED_FIELD || ''' 
              TRIM_SPACE = '|| file_format_options:TRIM_SPACE ||'
              EMPTY_FIELD_AS_NULL = '|| file_format_options:EMPTY_FIELD_AS_NULL ||'
              SKIP_BYTE_ORDER_MARK = '|| file_format_options:SKIP_BYTE_ORDER_MARK ||'
              MULTI_LINE = '|| file_format_options:MULTI_LINE ||''
              ;

            {%endif-%}
          
            {%if desiredState.config.fileFormatType == 'File Format Values'-%}
                      -- Create temporary file format
                       EXECUTE IMMEDIATE {{fileformatsql}};
            {%- endif %}

	  -- Execute the dynamic SQL statement to retrieve column names

  EXECUTE IMMEDIATE 'Use {{db}}' ;
 
  res := (EXECUTE IMMEDIATE columnlsrm);
  res2 := (EXECUTE IMMEDIATE columnlsadd);

  -- Loop through each row in the result set
  FOR col IN res DO
    -- Drop existing columns
    EXECUTE IMMEDIATE 'ALTER TABLE {{db}}.{{sch}}.{{desiredState.node.name}} DROP COLUMN "' ||col.COLUMN_NAME||'"';
  END FOR;

    -- Loop through each row in the result set
  FOR col IN res2 DO
    -- Drop existing columns
    EXECUTE IMMEDIATE 'ALTER TABLE {{db}}.{{sch}}.{{desiredState.node.name}} ADD COLUMN "' ||col.COLUMN_NAME||'"' ||  col.TYPE;
  END FOR;
  
  -- Return a success message
  RETURN 'Columns added and dropped successfully.';

END; 

{%elif currentState != undefined and desiredState.config.redeploymentBehavior == 'Drop existing table' %}

# Drops the dynamically created table based on inferred schema

    {# Table or View Name #}
    {% set targetObjectDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
    {% set targetObjectSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
    {% set fullyQualifiedTargetObjectName = ref_no_link(currentState.node.location.name, currentState.node.name) %}
    
    {{ stage('Drop inferred table' , true, "sql", "drop") }}
       DROP TABLE IF EXISTS {{ fullyQualifiedTargetObjectName }}


{%endif%}

{% endif %}