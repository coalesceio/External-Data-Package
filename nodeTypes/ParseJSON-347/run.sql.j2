{#
    Copyright (c) 2023 Coalesce. All rights reserved.
This script and its associated documentation are confidential and proprietary to Coalesce.
Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
does not permit copying or modification for any other purpose.  
#}
{# == Node Type Version        : 1  == #}
{# == Node Type Name           : Parse Json == #}
{# == Node Type Description    : This node loads data from large json arrays in json file located in internal or exteranl stage location. == #}

{% set udtfName = node.name %}
{% set udtfStrLoc = config.udtfLocation %}
{% set udtfDb = storageLocations | selectattr('name', 'equalto', udtfStrLoc) | map(attribute='database') | first %}
{% set udtfSch = storageLocations | selectattr('name', 'equalto', udtfStrLoc) | map(attribute='schema') | first %}

{% set fqUdtfName = '"' + udtfDb + '"."' + udtfSch + '"."' + udtfName + '"' %}

{% set tgtTbl = node.name %}
{% set srcFileStrLoc = config.srcFileStrLoc %}
{% set srcFileStage = config.srcStage %}
{% set srcJsonArrName = config.srcJsonArr %}
{% set srcFile = config.srcFile %}

{% set tgtTblStLoc = node.location.name %}

{% set srcDb = storageLocations | selectattr('name', 'equalto', srcFileStrLoc) | map(attribute='database') | first %}
{% set srcSch = storageLocations | selectattr('name', 'equalto', srcFileStrLoc) | map(attribute='schema') | first %}
{% set fqSrcFileStage = '@"' + srcDb + '"."' + srcSch + '"."' + srcFileStage + '"' %}

{% set tgtDb = storageLocations | selectattr('name', 'equalto', tgtTblStLoc) | map(attribute='database') | first %}
{% set tgtSch = storageLocations | selectattr('name', 'equalto', tgtTblStLoc) | map(attribute='schema') | first %}



{{ stage('Run Python Parse Excel udtf') }}
INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
SELECT 	
         {% for source in sources %}		
            {% for col in source.columns %}
               {%if col.transform != ""%}
                    {{col.transform}}
               {%else%}
                    {{col.name}}
                {%endif%}
	        {%- if not loop.last -%}, {% endif %}
	    {% endfor %}
            {% endfor %} 
FROM TABLE( {{ fqUdtfName }} (build_scoped_file_url({{ fqSrcFileStage }}, '{{ srcFile }}'), '{{ srcJsonArrName }}') )


